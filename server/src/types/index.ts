// Shared types for the P&ID Digitizer Server

export interface User {
  id: number;
  username: string;
  email: string;
  department?: string;
  role: 'user' | 'admin';
  created_at: string;
  updated_at: string;
  last_login?: string;
  is_active: boolean;
}

export interface Project {
  id: number;
  user_id: number;
  name: string;
  pdf_filename: string;
  pdf_file_path: string;
  pdf_file_size?: number;
  status: 'created' | 'processing' | 'completed' | 'error';
  tags_data?: any;
  relationships_data?: any;
  raw_text_items_data?: any;
  descriptions_data?: any;
  equipment_short_specs_data?: any;
  loops_data?: any;
  processing_progress?: any;
  error_message?: string;
  created_at: string;
  updated_at: string;
}

export interface UserSetting {
  id: number;
  user_id: number;
  setting_key: string;
  setting_value: any;
  created_at: string;
  updated_at: string;
}

export interface SharedSetting {
  id: number;
  department?: string;
  setting_key: string;
  setting_value: any;
  description?: string;
  is_default: boolean;
  created_by?: number;
  created_at: string;
  updated_at: string;
}

export interface FileUpload {
  id: number;
  user_id: number;
  original_filename: string;
  stored_filename: string;
  file_path: string;
  file_size?: number;
  mime_type?: string;
  upload_status: 'uploaded' | 'processing' | 'processed' | 'error';
  created_at: string;
}

export interface AuditLog {
  id: number;
  user_id?: number;
  action: string;
  entity_type?: string;
  entity_id?: number;
  details?: any;
  ip_address?: string;
  user_agent?: string;
  created_at: string;
}

// Request/Response types
export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  user: Omit<User, 'password_hash'>;
  message: string;
}

export interface CreateProjectRequest {
  name: string;
  pdf_filename: string;
}

export interface ProcessPdfRequest {
  project_id: number;
  patterns?: any;
  tolerances?: any;
  app_settings?: any;
}

export interface ApiResponse<T = any> {
  data?: T;
  error?: string;
  message?: string;
}

// WebSocket message types
export interface WebSocketMessage {
  type: 'progress' | 'complete' | 'error' | 'connected' | 'subscribed' | 'pong';
  projectId?: number;
  data?: any;
}

// Processing progress
export interface ProcessingProgress {
  current: number;
  total: number;
  stage?: string;
  message?: string;
}

// Import client types (these should match the client-side types)
export interface Tag {
  id: string;
  text: string;
  page: number;
  bbox: {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
  };
  category: string;
  sourceItems?: any[];
  isReviewed?: boolean;
}

export interface Relationship {
  id: string;
  from: string;
  to: string;
  type: string;
}

export interface RawTextItem {
  id: string;
  text: string;
  page: number;
  bbox: {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
  };
}

export interface Description {
  id: string;
  text: string;
  page: number;
  bbox: {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
  };
  sourceItems: any[];
  metadata: {
    type: 'Note' | 'Hold';
    scope: string;
    number: number;
  };
}

export interface EquipmentShortSpec {
  id: string;
  text: string;
  page: number;
  bbox: {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
  };
  sourceItems: any[];
  metadata: {
    originalEquipmentTag: Tag;
    service: string;
  };
}

export interface Loop {
  id: string;
  tagIds: string[];
  createdAt: string;
  isAutoGenerated: boolean;
}